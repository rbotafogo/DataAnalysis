seg_train12_glm_fit = glm(Class ~ ., data = seg_train12, family=binomial())
summary(seg_train12_glm_fit)
seg_train13 = seg_train12[, -7]
seg_train13_glm_fit = glm(Class ~ ., data = seg_train13, family=binomial())
summary(seg_train13_glm_fit)
percent(636 / (636 + 373))
seg_train13_glm_pred = predict(seg_train13_glm_fit, type = "response")
conf = table(seg_train13$Class, seg_train13_glm_pred > 0.5)
percent(confusion(conf))
seg_test = subset(segmentationOriginal, segmentationOriginal$Case == "Test")
class_test = seg_test$Class
case_test = seg_test$Case
cell_test = seg_test$Cell
seg_test = seg_test[, -c(1, 2, 3)]
seg_test_status = grep("Status", names(seg_test))
seg_test = seg_test[, -seg_test_status]
# aplicar as mesmas transformações anteriores para os dados de seg_test, ou seja, "BoxCox",
# "center", "scale", "pca", já definidas em pre_processo
seg_test = predict(pre_processo, newdata = seg_test)
str(seg_test)
# eliminar de seg_test todas as variáveis independentes que não entraram no modelo
seg_test = seg_test[, c(1, 2, 3, 5, 6, 7, 12, 19)]
# adicionar a seg_test as classes
seg_test$Class = class_test
str(seg_test)
# fazer a previsão dos dados de teste utilizando o melhor modelo que obtivemos:
# seg_train13_glm_fit
seg_test_glm_pred = predict(seg_train13_glm_fit, newdata = seg_test, type = "response")
# fazer a confusion matrix para a previsão
conf = table(seg_test$Class, seg_test_glm_pred > 0.5)
conf
percent(confusion(conf))
# obter os elementos com maior probabilidade de erro, ou seja, aqueles cuja a probabilidade está perto de # 50%.  Posteriormente, o ideal é variar este valor de forma a encontrar o melhor "range".
range = 0.20
# definir a variável erro_pot (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_pot = seg_train13_glm_pred > (0.5 - range) & seg_train13_glm_pred < (0.5 + range)
# obter todos os elementos com alta probabilidade de acerto
altaProb_train = subset(seg_train13$Class, erro_pot == FALSE)
altaProb_length = length(altaProb_train)
# obter todos os elementos previstos com alta probabilidade de acerto
altaProb_train_glm_pred = subset(seg_train13_glm_pred, erro_pot == FALSE)
altaProb_train_glm_pred$Class = altaProb_train_glm_pred > 0.5
# fazer a confusion matrix e verificar o percentual de acerto
conf = table(altaProb_train_glm_pred$Class, altaProb_train)
conf
percent(confusion(conf))
baixaProb_train = subset(seg_train13$Class, erro_pot == TRUE)
baixaProb_length = length(baixaProb_train)
baixaProb_train_pred = subset(seg_train13_glm_pred, erro_pot == TRUE)
baixaProb_train_pred$Class = baixaProb_train_pred > 0.5
conf = table(baixaProb_train_pred$Class, baixaProb_train)
conf
percent(confusion(conf))
altaProb_length
baixaProb_length
altaProb_length + baixaProb_length
library(rpart)
library(rpart.plot)
# Monta um df de treinamento apenas com os dados com baixa probabilidade
segBaixa_train = subset(seg_train, erro_pot == TRUE)
# obten as classes dos dados de baixa probabilidade
classBaixa = subset(class, erro_pot == TRUE)
segBaixa_train$Class = classBaixa
# monta um modelo para os dados com baixa probabilidade
segBaixa_train_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit=30))
summary(segBaixa_train_cart_fit)
prp(segBaixa_train_cart_fit)
segBaixa_train_cart_pred = predict(segBaixa_train_cart_fit, type="class")
length(segBaixa_train$Class)
conf = table(segBaixa_train$Class, segBaixa_train_cart_pred)
conf
percent(confusion(conf))
tp = 464 + 87
fp = 42 + 41
fn = 44 + 15
tn = 170 + 146
total = 551+83+59+316
percent((tp+tn) / total)
# fazer modelo randomForest
segBaixa_train_rf_fit = randomForest(Class ~ ., data = segBaixa_train, ntree = 200, nodesize = 30)
# fazer as previsões
segBaixa_train_rf_pred = predict(segBaixa_train_rf_fit)
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_rf_pred)
conf
percent(confusion(conf))
library(e1071)
fitControl = trainControl(method="cv", number=10)
cartGrid = expand.grid(.cp=(1:50)*0.01)
segBaixa_train_cv = train(Class ~ ., data = segBaixa_train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
segBaixa_train_cv
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(cp=0.09))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 30))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(cp = 0.05))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 40))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 35))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 29))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 25))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 20))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 15))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 10))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 5))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 1))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 1))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
prp(segBaixa_train_cart_fit)
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 1))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
summary(segBaixa_train_cv_cart_fit)
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit = 30))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
summary(segBaixa_train_cv_cart_fit)
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(cp = 0.09))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
summary(segBaixa_train_cv_cart_fit)
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
# obter os dados de teste apenas da região de baixa probabilidade
# definir a variável erro_test (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_test = seg_test_glm_pred > (0.5 - range) & seg_test_glm_pred < (0.5 + range)
erro_test
# obter os dados de teste apenas da região de baixa probabilidade
# definir a variável erro_test (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_test = seg_test_glm_pred > (0.5 - range) & seg_test_glm_pred < (0.5 + range)
length(erro_test)
# obter os dados de teste apenas da região de baixa probabilidade
# definir a variável erro_test (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_test = seg_test_glm_pred > (0.5 - range) & seg_test_glm_pred < (0.5 + range)
length(seg_test_glm_pred)
length(erro_test)
# obter os dados de teste apenas da região de baixa probabilidade
# definir a variável erro_test (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_test = seg_test_glm_pred > (0.5 - range) & seg_test_glm_pred < (0.5 + range)
seg_test_glm_pred
length(seg_test_glm_pred)
length(erro_test)
# obter os dados de teste apenas da região de baixa probabilidade
# definir a variável erro_test (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_test = seg_test_glm_pred > (0.5 - range) & seg_test_glm_pred < (0.5 + range)
0.5-range
# seg_test_glm_pred
# length(seg_test_glm_pred)
# length(erro_test)
baixaProb_test = subset(seg_test$Class, erro_test == TRUE)
baixaProb_test_length = length(baixaProb_test)
baixaProb_test_pred = subset(seg_test_glm_pred, erro_test == TRUE)
baixaProb_test_pred$Class = baixaProb_test_pred > 0.5
conf = table(baixaProb_train_pred$Class, baixaProb_train)
conf
percent(confusion(conf))
baixaProb_test = subset(seg_test$Class, erro_test == TRUE)
baixaProb_test_length = length(baixaProb_test)
baixaProb_test_pred = subset(seg_test_glm_pred, erro_test == TRUE)
baixaProb_test_pred$Class = baixaProb_test_pred > 0.5
conf = table(baixaProb_test_pred$Class, baixaProb_test)
conf
percent(confusion(conf))
# Monta um df de teste apenas com os dados com baixa probabilidade
segBaixa_test = subset(seg_test, erro_test == TRUE)
# obten as classes dos dados de baixa probabilidade
classBaixa = subset(class_test, erro_pot == TRUE)
segBaixa_test$Class = classBaixa
# Monta um df de teste apenas com os dados com baixa probabilidade
segBaixa_test = subset(seg_test, erro_test == TRUE)
# monta um modelo para os dados com baixa probabilidade
segBaixa_test_cart_fit = rpart(Class ~ ., data = segBaixa_test, method = "class", control=rpart.control(minsplit=30))
summary(segBaixa_test_cart_fit)
prp(segBaixa_test_cart_fit)
seg_test = subset(segmentationOriginal, segmentationOriginal$Case == "Test")
class_test = seg_test$Class
case_test = seg_test$Case
cell_test = seg_test$Cell
seg_test = seg_test[, -c(1, 2, 3)]
seg_test_status = grep("Status", names(seg_test))
seg_test = seg_test[, -seg_test_status]
# aplicar as mesmas transformações anteriores para os dados de seg_test, ou seja, "BoxCox",
# "center", "scale", "pca", já definidas em pre_processo
seg_test13 = predict(pre_processo, newdata = seg_test)
str(seg_test13)
# eliminar de seg_test todas as variáveis independentes que não entraram no modelo
seg_test13 = seg_test13[, c(1, 2, 3, 5, 6, 7, 12, 19)]
# adicionar a seg_test as classes
seg_test13$Class = class_test
str(seg_test13)
# fazer a previsão dos dados de teste utilizando o melhor modelo que obtivemos:
# seg_train13_glm_fit
seg_test13_glm_pred = predict(seg_train13_glm_fit, newdata = seg_test13, type = "response")
# fazer a confusion matrix para a previsão
conf = table(seg_test13$Class, seg_test13_glm_pred > 0.5)
conf
percent(confusion(conf))
# install.packages("randomForest")
# install.packages("ROCR")
# install.packages("e1071")
# suppressPackageseg_trainartupMessages()
library(scales)
library(ggplot2)
library(caret)
library(randomForest)
library(ROCR)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
confusion = function(conf) {
percentual = (conf[1, 1] + conf[2, 2]) / sum(conf)
return (percentual)
};
# separar campos que não serão utilizados durante a análise preditiva
seg_train = subset(segmentationOriginal, segmentationOriginal$Case == "Train")
cell = seg_train$Cell
class = seg_train$Class
# remover as três colunas acima do DF
seg_train = seg_train[, -c(1, 2, 3)]
# remover também as colunas de "seg_trainatus"
status = grep("Status", names(seg_train))
seg_train = seg_train[, -status]
head(seg_train)
str(seg_train)
summary(class)
seg_train1 = seg_train
seg_train1$Class = class
str(seg_train1)
seg_train1_glm_fit = glm(Class ~ ., data=seg_train1, family=binomial())
summary(seg_train1_glm_fit)
seg_train2 = seg_train
# definir como pré-processar os dados
pre_processo = preProcess(seg_train2, method=c("BoxCox", "center", "scale", "pca"))
# aplicar o pre_processo aos dados do próximo modelo
seg_train2 = predict(pre_processo, seg_train2)
str(seg_train2)
seg_train2$Class = class
str(seg_train2)
seg_train2_glm_fit = glm(Class ~ ., data = seg_train2, family=binomial())
summary(seg_train2_glm_fit)
seg_train3 = seg_train2[, -15]
seg_train3_glm_fit = glm(Class ~ ., data = seg_train3, family=binomial())
summary(seg_train3_glm_fit)
seg_train4 = seg_train3[, -11]
seg_train4_glm_fit = glm(Class ~ ., data = seg_train4, family=binomial())
summary(seg_train4_glm_fit)
seg_train5 = seg_train4[, -12]
seg_train5_glm_fit = glm(Class ~ ., data = seg_train5, family=binomial())
summary(seg_train5_glm_fit)
seg_train6 = seg_train5[, -13]
seg_train6_glm_fit = glm(Class ~ ., data = seg_train6, family=binomial())
summary(seg_train6_glm_fit)
seg_train7 = seg_train6[, -10]
seg_train7_glm_fit = glm(Class ~ ., data = seg_train7, family=binomial())
summary(seg_train7_glm_fit)
seg_train8 = seg_train7[, -12]
seg_train8_glm_fit = glm(Class ~ ., data = seg_train8, family=binomial())
summary(seg_train8_glm_fit)
seg_train9 = seg_train8[, -4]
seg_train9_glm_fit = glm(Class ~ ., data = seg_train9, family=binomial())
summary(seg_train9_glm_fit)
seg_train10 = seg_train9[, -10]
seg_train10_glm_fit = glm(Class ~ ., data = seg_train10, family=binomial())
summary(seg_train10_glm_fit)
seg_train11 = seg_train10[, -10]
seg_train11_glm_fit = glm(Class ~ ., data = seg_train11, family=binomial())
summary(seg_train11_glm_fit)
seg_train12 = seg_train11[, -7]
seg_train12_glm_fit = glm(Class ~ ., data = seg_train12, family=binomial())
summary(seg_train12_glm_fit)
seg_train13 = seg_train12[, -7]
seg_train13_glm_fit = glm(Class ~ ., data = seg_train13, family=binomial())
summary(seg_train13_glm_fit)
percent(636 / (636 + 373))
seg_train13_glm_pred = predict(seg_train13_glm_fit, type = "response")
conf = table(seg_train13$Class, seg_train13_glm_pred > 0.5)
percent(confusion(conf))
seg_test = subset(segmentationOriginal, segmentationOriginal$Case == "Test")
class_test = seg_test$Class
case_test = seg_test$Case
cell_test = seg_test$Cell
seg_test = seg_test[, -c(1, 2, 3)]
seg_test_status = grep("Status", names(seg_test))
seg_test = seg_test[, -seg_test_status]
# aplicar as mesmas transformações anteriores para os dados de seg_test, ou seja, "BoxCox",
# "center", "scale", "pca", já definidas em pre_processo
seg_test13 = predict(pre_processo, newdata = seg_test)
str(seg_test13)
# eliminar de seg_test todas as variáveis independentes que não entraram no modelo
seg_test13 = seg_test13[, c(1, 2, 3, 5, 6, 7, 12, 19)]
# adicionar a seg_test13 as classes
seg_test13$Class = class_test
str(seg_test13)
# fazer a previsão dos dados de teste utilizando o melhor modelo que obtivemos:
# seg_train13_glm_fit
seg_test13_glm_pred = predict(seg_train13_glm_fit, newdata = seg_test13, type = "response")
# fazer a confusion matrix para a previsão
conf = table(seg_test13$Class, seg_test13_glm_pred > 0.5)
conf
percent(confusion(conf))
# obter os elementos com maior probabilidade de erro, ou seja, aqueles cuja a probabilidade está perto de # 50%.  Posteriormente, o ideal é variar este valor de forma a encontrar o melhor "range".
range = 0.20
# definir a variável erro_pot (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_pot = seg_train13_glm_pred > (0.5 - range) & seg_train13_glm_pred < (0.5 + range)
# obter todos os elementos com alta probabilidade de acerto
altaProb_train = subset(seg_train13$Class, erro_pot == FALSE)
altaProb_length = length(altaProb_train)
# obter todos os elementos previstos com alta probabilidade de acerto
altaProb_train_glm_pred = subset(seg_train13_glm_pred, erro_pot == FALSE)
altaProb_train_glm_pred$Class = altaProb_train_glm_pred > 0.5
# fazer a confusion matrix e verificar o percentual de acerto
conf = table(altaProb_train_glm_pred$Class, altaProb_train)
conf
percent(confusion(conf))
baixaProb_train = subset(seg_train13$Class, erro_pot == TRUE)
baixaProb_length = length(baixaProb_train)
baixaProb_train_pred = subset(seg_train13_glm_pred, erro_pot == TRUE)
baixaProb_train_pred$Class = baixaProb_train_pred > 0.5
conf = table(baixaProb_train_pred$Class, baixaProb_train)
conf
percent(confusion(conf))
altaProb_length
baixaProb_length
altaProb_length + baixaProb_length
library(rpart)
library(rpart.plot)
# Monta um df de treinamento apenas com os dados com baixa probabilidade
segBaixa_train = subset(seg_train, erro_pot == TRUE)
# obten as classes dos dados de baixa probabilidade
classBaixa = subset(class, erro_pot == TRUE)
segBaixa_train$Class = classBaixa
# monta um modelo para os dados com baixa probabilidade
segBaixa_train_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(minsplit=30))
summary(segBaixa_train_cart_fit)
prp(segBaixa_train_cart_fit)
segBaixa_train_cart_pred = predict(segBaixa_train_cart_fit, type="class")
length(segBaixa_train$Class)
conf = table(segBaixa_train$Class, segBaixa_train_cart_pred)
conf
percent(confusion(conf))
tp = 464 + 87
fp = 42 + 41
fn = 44 + 15
tn = 170 + 146
total = 551+83+59+316
percent((tp+tn) / total)
# fazer modelo randomForest
segBaixa_train_rf_fit = randomForest(Class ~ ., data = segBaixa_train, ntree = 200, nodesize = 30)
# fazer as previsões
segBaixa_train_rf_pred = predict(segBaixa_train_rf_fit)
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_rf_pred)
conf
percent(confusion(conf))
library(e1071)
fitControl = trainControl(method="cv", number=10)
cartGrid = expand.grid(.cp=(1:50)*0.01)
segBaixa_train_cv = train(Class ~ ., data = segBaixa_train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
segBaixa_train_cv
segBaixa_train_cv_cart_fit = rpart(Class ~ ., data = segBaixa_train, method = "class", control=rpart.control(cp = 0.09))
segBaixa_train_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, type = "class")
summary(segBaixa_train_cv_cart_fit)
# verificar a confusion matrix
conf = table(segBaixa_train$Class, segBaixa_train_cv_cart_pred)
conf
percent(confusion(conf))
# obter os dados de teste apenas da região de baixa probabilidade
# definir a variável erro_test (erro potencial) como os elementos cujo erro está dentro do range em torno
# de 50%
erro_test = seg_test_glm_pred > (0.5 - range) & seg_test_glm_pred < (0.5 + range)
baixaProb_test = subset(seg_test$Class, erro_test == TRUE)
baixaProb_test_length = length(baixaProb_test)
baixaProb_test_pred = subset(seg_test_glm_pred, erro_test == TRUE)
baixaProb_test_pred$Class = baixaProb_test_pred > 0.5
conf = table(baixaProb_test_pred$Class, baixaProb_test)
baixaProb_test = subset(seg_test, erro_test == TRUE)
length(baixaProb_test)
baixaProb_test
baixaProb_test = subset(seg_test, erro_test == TRUE)
length(baixaProb_test)
altaProb_test = subset(seg_test, erro_test == FALSE)
length(altaProb_test)
baixaProb_test = subset(seg_test, erro_test == TRUE)
length(baixaProb_test$Class)
altaProb_test = subset(seg_test, erro_test == FALSE)
length(altaProb_test$Class)
baixaProb_test = subset(seg_test, erro_test == TRUE)
baixaProb_test$Class = subset(class_test, erro_test == TRUE)
length(baixaProb_test$Class)
altaProb_test = subset(seg_test, erro_test == FALSE)
altaProb_test$Class = subset(class_test, error_test == FALSE)
baixaProb_test = subset(seg_test, erro_test == TRUE)
baixaProb_test$Class = subset(class_test, erro_test == TRUE)
length(baixaProb_test$Class)
altaProb_test = subset(seg_test, erro_test == FALSE)
altaProb_test$Class = subset(class_test, erro_test == FALSE)
length(altaProb_test$Class)
baixaProb_test_cart_pred = predict(segBaixa_train_cart_fit, newdata=baixaProb_test)
# verificar a confusion matrix
conf = table(baixaProb_test$Class, baixaProb_test_cart_pred)
baixaProb_test_cart_pred = predict(segBaixa_train_cart_fit, newdata=baixaProb_test)
baixaProb_test_cart_pred
# verificar a confusion matrix
# conf = table(baixaProb_test$Class, baixaProb_test_cart_pred)
# conf
# percent(confusion(conf))
baixaProb_test_cart_pred = predict(segBaixa_train_cart_fit, newdata=baixaProb_test, type = "class")
baixaProb_test_cart_pred
# verificar a confusion matrix
# conf = table(baixaProb_test$Class, baixaProb_test_cart_pred)
# conf
# percent(confusion(conf))
baixaProb_test_cart_pred = predict(segBaixa_train_cart_fit, newdata=baixaProb_test, type = "class")
# baixaProb_test_cart_pred
# verificar a confusion matrix
conf = table(baixaProb_test$Class, baixaProb_test_cart_pred)
conf
percent(confusion(conf))
baixaProb_test_cv_cart_pred = predict(segBaixa_train_cv_cart_fit, newdata=baixaProb_test, type = "class")
# baixaProb_test_cart_pred
# verificar a confusion matrix
conf = table(baixaProb_test$Class, baixaProb_test_cv_cart_pred)
conf
percent(confusion(conf))
bp = subset(seg_test13, erro_test == TRUE)
bp
bp = subset(seg_test13, erro_test == TRUE)
conf = table(seg_test13$Class, bp$Class)
bp = subset(seg_test13, erro_test == TRUE)
or = subset(seg_test13_glm_pred, erro_test == TRUE)
conf = table(bp$Class, or)
conf
percent(confusion(conf))
bp = subset(seg_test13, erro_test == TRUE)
or = subset(seg_test13_glm_pred > 0.5, erro_test == TRUE)
conf = table(bp$Class, or)
conf
percent(confusion(conf))
