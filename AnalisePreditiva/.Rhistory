library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x = x, y = y)) + geom_point()
models = tibble (
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x = x, y = y)) +
geom_abline(aes(intercept = a1, slope = a2),
data = models, alpha = 1/4) +
geom_point()
# Função model1 pega o valor de x de 'data' e calcula o valor de y corresponde no modelo
model1 = function(a, data) {
a[1] + data$x * a[2]
}
# exemplo de como chamar a função model1, passando os valores de interseção e coeficiente
model1(c(7, 1.5), sim1)
measure_distance = function(mod, data) {
diff = data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7,1.5), sim1)
# mede a distância entre um modelo dados por interseção e coeficiente para os dados em sim1
sim1_dist = function(intersept, slope) {
measure_distance(c(intersept, slope), sim1)
}
# verifica a distância de todos os modelos criados para os dados em sim1
models = models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
# colocar os pontos dos dados com tamanho 2 e cor especificada
geom_point(size = 2, color = "grey30") +
# adicionar as 10 primeiras ablines
geom_abline(aes(intercept = a1, slope = a2, color = -dist),
data = filter(models, rank(dist) <= 10))
grid = expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>%
ggplot(aes(a1, a2)) +
geom_point(data = filter(grid, rank(dist) <= 10),
color = "red", size = 4) +
geom_point(aes(color = -dist))
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_abline(data = filter(grid, rank(dist) <= 10),
aes(intercept = a1, slope = a2, color = -dist))
sim1_lm_fit = lm(y ~ x, data = sim1)
coef(sim1_lm_fit)
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_abline(intercept = coef(sim1_lm_fit)[[1]],
slope = coef(sim1_lm_fit)[[2]], color = "red")
grid = sim1 %>% data_grid(x)
grid
grid = grid %>% add_predictions(sim1_lm_fit)
grid
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red", size = 1)
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red")
sim1 %>%
add_residuals(sim1_lm_fit)
sim1
sim1 = sim1 %>%
add_residuals(sim1_lm_fit)
sim1 = sim1 %>%
add_residuals(sim1_lm_fit)
sim1
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red") +
geom_line(data = sim1, aes(y = resid), color = "green")
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red") +
geom_line(data = sim1, aes(y = sim1$pred - resid), color = "green")
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red") +
geom_line(data = sim1, aes(y = (sim1$pred - resid)), color = "green")
grid = sim1 %>%
add_residuals(sim1_lm_fit)
sim1
grid = sim1 %>%
add_residuals(sim1_lm_fit)
grid
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red") +
geom_line(aes(y = resid), color = "green")
grid = grid %>% add_predictions(sim1_lm_fit)
grid
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red")
grid = sim1 %>%
add_residuals(sim1_lm_fit)
grid
grid$resid = sim1 %>%
add_residuals(sim1_lm_fit)
grid
grid = grid %>% add_predictions(sim1_lm_fit)
grid
grid = sim1 %>% data_grid(x)
grid
grid = grid %>% add_predictions(sim1_lm_fit)
grid
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(data = grid, aes(y = pred), color = "red")
grid$resid = sim1 %>%
add_residuals(sim1_lm_fit)
sim1 = sim1 %>%
add_residuals(sim1_lm_fit)
sim1
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(aes(y = resid), color = "green")
geom_line(data = grid, aes(y = pred), color = "red")
sim1 %>%
ggplot(aes(x, y)) + geom_point() +
geom_line(aes(y = resid), color = "green") +
geom_line(data = grid, aes(y = pred), color = "red")
sim1 %>%
ggplot(aes(resid)) + geom_freqpoly(binwidth = 0.5)
sim1 %>%
ggplot(aes(x, resid)) +
geom_point()
sim1 %>%
ggplot(aes(x, resid)) +
geom_ref_line(h = 0)
geom_point()
sim1 %>%
ggplot(aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
df = tribble(
)
df
df = tribble(
)
df$sex=c("male", "female", "male")
df = tribble(
~sex, ~response
"male", 1,
df = tribble(
~ sex, ~ response
"male", 1,
df = tribble(
~ sex, ~ response,
"male", 1,
"female", 0,
"male", 1
)
df
model_matrix(df, response ~ sex)
sim2
sim2 %>%
ggplot(aes(x, y))
sim2
sim2 %>%
ggplot(aes(x, y)) + geom_point()
sim2_lm_fit = lm(x ~ y, data = sim2)
sim2
sim2
sim2_lm_fit = lm(y ~ x, data = sim2)
grid2 = sim2 %>% data_grid(x)
grid2
grid2 = sim2 %>% data_grid(x)
grid2 = grid2 %>% add_predictions(sim2_lm_fit)
grid2
sim2 %>%
ggplot(aes(x, y)) + geom_point() +
geom_point(data = grid2, aes(y = pred), color = "red", size = 1)
sim2 %>%
ggplot(aes(x, y)) + geom_point() +
geom_point(data = grid2, aes(y = pred), color = "red", size = 4)
sim3
sim3
sim3_lm_fit1 = lm(y ~ x1 + x2)
sim3
sim3_lm_fit1 = lm(data = sim3, y ~ x1 + x2)
sim3_lm_fit2 = lm(data = sim3, y ~ x1 * x2)
grid3 = sim3 %>% data_grid(x1, x2)
grid3 = grid3 %>% gather_predictions(sim3_lm_fit1)
sim3 %>% ggplot(aes(x1, y)) + geom_point(aes(color = x2))
grid3 = sim3 %>% data_grid(x1, x2)
grid3 = grid3 %>% gather_predictions(sim3_lm_fit1, sim3_lm_fit2)
grid3
sim3 %>% ggplot(aes(x1, y, color = x2)) + geom_point() +
geom_line(data = grid3, aes(y = pred)) + facet_wrap(~ model)
sim3_1 = sim3 %>% filter(x2 = c)
sim3_1 = sim3 %>% filter(x2 == c)
sim3_1 = sim3 %>% filter(x2 == "c"")
sim3_1 = sim3 %>% filter(x2 == "c")
sim3_1 = sim3 %>% filter(x2 == "c") %>%
ggplot(aes(x1, y)) + geom_point()
sim3_1 = sim3 %>% filter(x2 == "c")
sim3_1 %>%
ggplot(aes(x1, y)) + geom_point()
sim3_1 = sim3 %>% filter(x2 == "c")
sim3_1_lm_fit = lm(data = sim3_1, y ~ x)
sim3_1 = sim3 %>% filter(x2 == "c")
sim3_1_lm_fit = lm(data = sim3_1, y ~ x1)
sim3_1 %>%
ggplot(aes(x1, y)) + geom_point() +
geom_abline(intercept = coef(sim3_1_lm_fit)[[1]],
slope = coef(sim3_1_lm_fit)[[2]], color = "red")
sim3_1 = sim3 %>% filter(x2 == "d")
sim3_1_lm_fit = lm(data = sim3_1, y ~ x1)
sim3_1 %>%
ggplot(aes(x1, y)) + geom_point() +
geom_abline(intercept = coef(sim3_1_lm_fit)[[1]],
slope = coef(sim3_1_lm_fit)[[2]], color = "red")
sim3 %>% ggplot(aes(x1, y)) + geom_point(aes(color = x2))
sim3_lm_fit1 = lm(data = sim3, y ~ x1 + x2)
sim3_lm_fit1
sim3_lm_fit2 = lm(data = sim3, y ~ x1 * x2)
sime3_lm_fit2
sim3 %>% ggplot(aes(x1, y)) + geom_point(aes(color = x2))
sim3_lm_fit1 = lm(data = sim3, y ~ x1 + x2)
sim3_lm_fit1
sim3_lm_fit2 = lm(data = sim3, y ~ x1 * x2)
sim3_lm_fit2
sim3_1_lm_fit
install.packages("ISLR")
library(ISLR)
library(tidyverse)
advertising = read_csv("../Data/advertising.csv")
advertising = read_csv("Data/advertising.csv")
advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point()
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point()
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point()
multiplot(tv, radio, cols=2)
library(ISLR)
library(tidyverse)
library(ggplot2)
multiplot(tv, radio, cols=2)
library(ISLR)
library(tidyverse)
library(ggplot2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point()
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point()
multiplot(tv, radio, cols=2)
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point()
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point()
newspaper = advertising %>% ggplot(aes(Newspaper, Sales)) + geom_point()
multiplot(tv, radio, newspaper, cols=3)
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point()
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point()
newspaper = advertising %>% ggplot(aes(Newspaper, Sales)) + geom_point()
multiplot(tv, radio, newspaper, cols=2)
tv_lm_fit = lm(Sales ~ TV, data = advertising)
tv_lm_fit = lm(Sales ~ TV, data = advertising)
tv_lm_fit
tv_lm_fit$coefficients
tv_lm_fit$coefficients[[1]]
tv_lm_fit = lm(Sales ~ TV, data = advertising)
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point() +
geom_abline(intercept = tv_lm_fit$coefficients[[1]],
slope = tv_lm_fit$coefficients[[2]])
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point()
newspaper = advertising %>% ggplot(aes(Newspaper, Sales)) + geom_point()
multiplot(tv, radio, newspaper, cols=2)
tv_lm_fit = lm(Sales ~ TV, data = advertising)
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point() +
geom_abline(intercept = tv_lm_fit$coefficients[[1]],
slope = tv_lm_fit$coefficients[[2]], color = "red")
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point()
newspaper = advertising %>% ggplot(aes(Newspaper, Sales)) + geom_point()
multiplot(tv, radio, newspaper, cols=2)
tv_lm_fit = lm(Sales ~ TV, data = advertising)
radio_lm_fit = lm(Sales ~ Radio, data = advertising)
newspaper_lm_fit = lm(Sales ~ newspaper, data = advertising)
tv_lm_fit = lm(Sales ~ TV, data = advertising)
radio_lm_fit = lm(Sales ~ Radio, data = advertising)
newspaper_lm_fit = lm(Sales ~ Newspaper, data = advertising)
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point() +
geom_abline(intercept = tv_lm_fit$coefficients[[1]],
slope = tv_lm_fit$coefficients[[2]], color = "red")
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point() +
geom_abline(intercept = radio_lm_fit$coefficients[[1]],
slope = radio_lm_fit$coefficientes[[2]], color = "red")
tv_lm_fit = lm(Sales ~ TV, data = advertising)
radio_lm_fit = lm(Sales ~ Radio, data = advertising)
newspaper_lm_fit = lm(Sales ~ Newspaper, data = advertising)
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point() +
geom_abline(intercept = tv_lm_fit$coefficients[[1]],
slope = tv_lm_fit$coefficients[[2]], color = "red")
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point() +
geom_abline(intercept = radio_lm_fit$coefficients[[1]],
slope = radio_lm_fit$coefficients[[2]], color = "red")
newspaper = advertising %>% ggplot(aes(Newspaper, Sales)) + geom_point() +
geom_abline(intercept = newspaper_lm_fit$coefficients[[1]],
slope = newspaper_lm_fit$coefficientes[[2]], color = "red")
tv_lm_fit = lm(Sales ~ TV, data = advertising)
radio_lm_fit = lm(Sales ~ Radio, data = advertising)
newspaper_lm_fit = lm(Sales ~ Newspaper, data = advertising)
tv = advertising %>% ggplot(aes(x = TV, y = Sales)) + geom_point() +
geom_abline(intercept = tv_lm_fit$coefficients[[1]],
slope = tv_lm_fit$coefficients[[2]], color = "red")
radio = advertising %>% ggplot(aes(x = Radio, y = Sales)) + geom_point() +
geom_abline(intercept = radio_lm_fit$coefficients[[1]],
slope = radio_lm_fit$coefficients[[2]], color = "red")
newspaper = advertising %>% ggplot(aes(Newspaper, Sales)) + geom_point() +
geom_abline(intercept = newspaper_lm_fit$coefficients[[1]],
slope = newspaper_lm_fit$coefficients[[2]], color = "red")
multiplot(tv, radio, newspaper, cols=2)
tv_lm_fit
tv_lm_fit$residuals
summary(tv_lm_fit)
advertising = read_csv("Data/advertising.csv")
tv_sum = summary(tv_lm_fit)
tv_sum$fstatistic
tv_sum$call
tv_sum$terms
tv_sum$
tv_sum$coefficients
tv_sum$sigma
tv_sum$df
tv_sum$r.squared
tv_sum = summary(tv_lm_fit)
summary(tv_lm_fit)
summary(tv_lm_fit)$coefficients
summary(tv_lm_fit)$coefficients[1, 3]
summary(tv_lm_fit)
tv_sum = summary(tv_lm_fit)
tv_sum$coefficients["t value"]
names(tv_sum$coefficients)
tv_sum$coefficients
radio_sum = summary(radio_lm_fit)
radio_sum$coefficients
newspaper_sum = summary(newspaper_lm_fit)
newspaper_sum$coefficients
