"0","# normalized gini function taked from:"
"0","# https://www.kaggle.com/c/ClaimPredictionChallenge/discussion/703"
"0","normalizedGini <- function(aa, pp) {"
"0","    Gini <- function(a, p) {"
"0","        if (length(a) !=  length(p)) stop(""Actual and Predicted need to be equal lengths!"")"
"0","        temp.df <- data.frame(actual = a, pred = p, range=c(1:length(a)))"
"0","        temp.df <- temp.df[order(-temp.df$pred, temp.df$range),]"
"0","        population.delta <- 1 / length(a)"
"0","        total.losses <- sum(a)"
"0","        null.losses <- rep(population.delta, length(a)) # Hopefully is similar to accumulatedPopulationPercentageSum"
"0","        accum.losses <- temp.df$actual / total.losses # Hopefully is similar to accumulatedLossPercentageSum"
"0","        gini.sum <- cumsum(accum.losses - null.losses) # Not sure if this is having the same effect or not"
"0","        sum(gini.sum) / length(a)"
"0","    }"
"0","    Gini(aa,pp) / Gini(aa,aa)"
"0","}"
"0","# create the normalized gini summary function to pass into caret"
"0","giniSummary <- function (data, lev = ""Yes"", model = NULL) {"
"0","    levels(data$obs) <- c('0', '1')"
"0","    out <- normalizedGini(as.numeric(levels(data$obs))[data$obs], data[, lev[2]])  "
"0","    names(out) <- ""NormalizedGini"""
"0","    out"
"0","}"
"0","convert = function(n) {"
"0","  i = ceiling((n*40)**2)"
"0","  for (a in 1:32) {"
"0","    if (((i - a) %% 31) == 0) {"
"0","      A = a;"
"0","    }"
"0","    M = (i - a) %/% 31;"
"0","  }"
"0","  return(c(A, M));"
"0","}"
